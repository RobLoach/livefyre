<?php
/**
 * @file
 *  Display Livefyre comments.
 */

/**
 * Define the zor library Livefyre will pull down from.
 */
define('LF_ZOR', 'http://zor.livefyre.com/wjs/v3.0/javascripts/livefyre.js');

/**
 * Include the Livefyre API
 */
include_once 'livefyre-api/libs/php/Livefyre.php';

/**
 * Implements hook_help().
 */
function livefyre_help($path, $arg) {
  switch ($path) {
    case 'admin/help#livefyre':
      return '<p>' . t('Implements Livefyre Comments 3') . '</p>';
      break;
  }
}

/**
 * Implements hook_menu().
 */
function livefyre_menu() {
  $items = array();

  $items['admin/config/content/livefyre'] = array(
    'title' => 'Livefyre Comments 3',
    'description' => 'Livefyre Comments 3 Plugin for Drupal',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('livefyre_admin'),
    'access arguments' => array('administer livefyre settings'),
    'file' => 'livefyre.admin.inc',
  );

  return $items;
}

/**
 * Implements hook_permission().
 */
function livefyre_permission() {
  return array(
    'administer livefyre comments' => array(
      'title' => t('Administer Livefyre Comments'),
      'description' => t('Allow a user to administer Livefyre Comments.'),
    ),
    'access livefyre comments' => array(
      'title' => t('Access Livefyre comments'),
      'description' => t('Use Livefyre comments on the site.'),
    ),
    'bypass livefyre comments visibility settings' => array(
      'title' => t('Bypass Livefyre comments visibility settings'),
      'description' => t('Show Livefyre comment fields, regardless of the field settings.'),
    ),
  );
}

/**
 * Implements hook_field_info().
 */
function livefyre_field_info() {
  return array(
    'livefyre' => array(
      'label' => t('Livefyre'),
      'description' => t('This field stores that the Livefyre comment is enabled or not.'),
      'default_widget' => 'livefyre_checkbox',
      'default_formatter' => 'livefyre_full',
      'instance_settings' => array(
        'livefyre_settings_hide' => 0,
      ),
    ),
  );
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Hide cardinality settings and set it to 1 and also hide the required checkbox
 * because it will be not used with the hide option.
 */
function livefyre_form_field_ui_field_edit_form_alter(&$form, &$form_state, $form_id) {
  if ($form['#field']['type'] == 'livefyre') {
    // Hide the cardinality setting on the field settings for Livefyre fields.
    $form['field']['cardinality']['#default_value'] = 1;
    $form['field']['#access'] = FALSE;
    // Hide required field from the field settings form.
    $form['instance']['required']['#access'] = FALSE;
  }
}

/**
 * Implements hook_field_instance_settings_form().
 */
function livefyre_field_instance_settings_form($field, $instance) {
  $settings = $instance['settings'];

  $form['livefyre_settings_hide'] = array(
    '#type' => 'checkbox',
    '#title' => t('Hide Livefyre comment settings'),
    '#description' => t('If you check this checkbox, content editors will not be able to modify the default settings on the content form.'),
    '#default_value' => $settings['livefyre_settings_hide'],
    '#weight' => 10,
  );

  return $form;
}

/**
 * Implements hook_field_is_empty().
 */
function livefyre_field_is_empty($item, $field) {
  if (empty($item['value']) && (string) $item['value'] !== '0') {
    return TRUE;
  }
  return FALSE;
}

/**
 * Implements hook_field_formatter_info().
 */
function livefyre_field_formatter_info() {
  return array(
    'livefyre_full' => array(
      'label' => t('Full'),
      'description' => t('Shows the full comment stream'),
      'field types' => array('livefyre'),
    ),
    'livefyre_comments_number' => array(
      'label' => t('Comments number'),
      'description' => t('Shows only the number of comments'),
      'field types' => array('livefyre'),
    ),
  );
}

/**
 * Implements hook_field_formatter_view().
 */
function livefyre_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();
  list($id, $vid, $bundle) = entity_extract_ids($entity_type, $entity);

  // Generate the article id from the current entity and entity ID. Use the
  // entity's url instead of type:id because it will easier to handle in the
  // block implementation.
  $article_id = entity_uri($entity_type, $entity);
  $article_id = $article_id['path'];

  switch ($display['type']) {
    case 'livefyre_full':
      foreach ($items as $delta => $item) {
        if ($item['value']) {
          $element[$delta] = array(
            '#theme' => 'livefyre_formatter_full',
            '#entity' => $entity,
            '#article_id' => $article_id,
            '#widget_id' => "livefyre-entity-{$entity_type}-id-{$id}-field-{$field['id']}-{$delta}",
            '#title' => isset($entity->title) ? $entity->title : drupal_get_title(),
          );
        }
      }
      break;

      case 'livefyre_comments_number':
        foreach ($items as $delta => $item) {
          if ($item['value']) {
            $element[$delta] = array(
              '#theme' => 'livefyre_formatter_comments_number',
              '#article_id' => $article_id,
              '#site_id' => variable_get('livefyre_site_id'),
            );
          }
        }
        break;
  }

  return $element;
}

/**
 * Implements hook_field_widget_info().
 */
function livefyre_field_widget_info() {
  return array(
    'livefyre_checkbox' => array(
      'label' => t('Checkbox'),
      'field types' => array('livefyre'),
    ),
  );
}

/**
 * Implements hook_field_access().
 */
function livefyre_field_access($op, $field, $entity_type, $entity, $account) {
  if ($field['type'] === "livefyre" && $op === "view") {
    return user_access('access livefyre comments');
  }

  return TRUE;
}

/**
 * Implements hook_field_widget_form().
 */
function livefyre_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {
  if ($instance['widget']['type'] == 'livefyre_checkbox') {
    $value = isset($items[$delta]['value']) ? $items[$delta]['value'] : 1;
    $element += array(
      '#type' => 'checkbox',
      '#default_value' => $value,
    );
    // If the form is hide from the user, check the bypass permission.
    if ($instance['settings']['livefyre_settings_hide']) {
      $element['#access'] = user_access('bypass livefyre comments visibility settings');
    }
  }

  return array('value' => $element);
}

/**
 * Implements hook_theme().
 */
function livefyre_theme($existing, $type, $theme, $path) {
  return array(
    'livefyre_formatter_full' => array(
      'variables' => array(
        'entity' => new stdClass(),
        'article_id' => '',
        'widget_id' => '',
        'title' => '',
      )
    ),
    'livefyre_formatter_comments_number' => array(
      'variables' => array(
        'article_id' => '',
        'site_id' => '',
      )
    ),
  );
}

/**
 * Renders livefyre field's full formatter.
 */
function theme_livefyre_formatter_full(&$variables) {
  // Custom delegate object if this is and enterprise customer.
  $delegate = livefyre_is_enterprise() ? 'authDelegate' : '';

  livefyre_page_setup();

  $out = livefyre_get_bootstrapped_data($variables['article_id'], '<div id="' . $variables['widget_id'] . '">');

  // Add JS libs.
  module_load_include('inc', 'livefyre', 'livefyre-enterprise-code');
  $conv = livefyre_build_conv($variables['article_id'], $variables['title']);
  $output = $conv->to_initjs_v3($variables['widget_id'], $delegate);
  $cleansed_tags = str_replace('<script type="text/javascript">', "", $output);
  $cleansed_tags = str_replace('</script>', "", $cleansed_tags);
  livefyre_add_footer($cleansed_tags);

  // Return with the id. If the bootstrap exists it will contain the generated
  // html data too for search engines.
  return $out;
}

/**
 * Renders livefyre comments number field formatter.
 */
function theme_livefyre_formatter_comments_number(&$variables) {
  $network = variable_get('livefyre_network', 'livefyre.com');
  drupal_add_js("http://zor.{$network}/wjs/v1.0/javascripts/CommentCount.js", 'external');
  $out = '<span class="livefyre-commentcount" data-lf-site-id="' . $variables['site_id'] . '" data-lf-article-id="' . $variables['article_id'] . '">' .
    t('0 Comments')
    . '</span>';

  return $out;
}

/**
 * Builds a Conversation object to get JS embed string.
 *
 * @param string $article_id
 *   Unique article ID for the conversation being created.
 * @return
 *   The block information with Livefyre's conversation data added to it.
 */
function livefyre_build_conv($article_id, $title) {
  global $base_url;

  $site_id = variable_get('livefyre_site_id');
  $site_key = variable_get('livefyre_site_key');
  $source_url = $base_url . '/' . current_path();
  $network = variable_get('livefyre_network', 'livefyre.com');
  $network_key = variable_get('livefyre_network_key', NULL);

  // Define Livefyre API variables
  $domain = new Livefyre_Domain($network, $network_key);
  $site = $domain->site($site_id, $site_key);
  $article = $site->article($article_id, $source_url, $title);
  $conv = $article->conversation();

  if (livefyre_is_enterprise()) {
    // Authenticate the user.
    _livefyre_user_authentication();
  }

  return $conv;
}

/**
 * Authenticate the currently logged in user to the livefyre widget.
 */
function _livefyre_user_authentication() {
  global $user;

  // Always add the javascript because the js will check the authentication but
  // we need to run the login/logout delegate functions independently of the
  // user is logged in or not.
  drupal_add_js(drupal_get_path('module', 'livefyre') . '/livefyre.js', array('scope' => 'footer'));
  // Return if the user is anonymus.
  if ($user->uid == 0) {
    return;
  }

  // Generate a user token for the authentication.
  $network = variable_get('livefyre_network', 'livefyre.com');
  $network_key = variable_get('livefyre_network_key', NULL);
  $domain = new Livefyre_Domain($network, $network_key);
  $token = $domain->user($user->uid, $user->name)->token();

  $js_settings = array(
    'livefyre' => array(
      'userToken' => $token,
    ),
  );

  // Add necessary javascript files and pass the token variable.
  drupal_add_js($js_settings, 'setting');
}

/**
 * Checks that the current environment is enterprise.
 * @return bool
 */
function livefyre_is_enterprise() {
  return (variable_get('livefyre_network', 'livefyre.com') != 'livefyre.com');
}

/**
 * Adds teh JS embed to the page.
 *
 * @param string $src
 *   The delta letting us know we're in Livefyre Land.
 */
function livefyre_add_footer($src) {
  // Check for Janrain implementation
  $global_push = "if (typeof LivefyreDrupal == 'undefined') {
      window.LivefyreDrupal = new Array();\n} LivefyreDrupal.push(lf_config);";
  if (livefyre_is_enterprise()) {
    $src = "var authDelegate = new fyre.conv.RemoteAuthDelegate();\n{$src}";
  }
  $src .= "\n" . $global_push;
  if (variable_get('livefyre_jr_capture')) {
    $src = "function livefyreJanrainInit(){\n" . $src . "}";
  }
  drupal_add_js('' . $src,
    array(
      'type' => 'inline',
      'scope' => 'footer',
      'weight' => -90,
    )
  );
}

/**
 * Spits out the setup every page with Livefyre needs.
 */
function livefyre_page_setup() {
  global $user;
  // Build the Livefyre zor URL
  $livefyre_zor = LF_ZOR;
  $lf_network = variable_get('livefyre_network', 'livefyre.com');
  if (variable_get('livefyre_environment') != 1) {
    $livefyre_zor = "http://zor." . $lf_network . "/wjs/v3.0/javascripts/livefyre.js";
  }

  // Add the external javascript to the page
  drupal_add_js($livefyre_zor,
    array(
      'type' => 'external',
      'scope' => 'header',
    )
  );

  // Add destination variable to js settings.
  $js_settings = array(
    'livefyre' => drupal_get_destination(),
  );
  $js_settings['livefyre']['uid'] = $user->uid;
  drupal_add_js($js_settings, 'setting');
}
